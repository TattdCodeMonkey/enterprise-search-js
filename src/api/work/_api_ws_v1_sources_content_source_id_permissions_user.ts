/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface GetUserPermissionsOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  /**
   * The username in context
   */
  user: string
  [k: string]: unknown
}

export interface GetUserPermissionsResponse {
  user: string
  /**
   * List of permissions
   */
  permissions: string[]
  [k: string]: unknown
}

/** Lists all permissions for one user */
export async function getUserPermissions (this: That, opts: GetUserPermissionsOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<GetUserPermissionsResponse>
export async function getUserPermissions (this: That, opts: GetUserPermissionsOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<GetUserPermissionsResponse, unknown>>
export async function getUserPermissions (this: That, opts: GetUserPermissionsOptions, transportOptions?: TransportRequestOptions): Promise<GetUserPermissionsResponse>
export async function getUserPermissions (this: That, opts: GetUserPermissionsOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/permissions/${encodeURIComponent(opts.user)}`,
    querystring: {}
  }

  return await this.transport.request<GetUserPermissionsResponse>(params, transportOptions)
}

export interface PutUserPermissionsOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  /**
   * The username in context
   */
  user: string
  [k: string]: unknown
}

export interface PutUserPermissionsResponse {
  user: string
  /**
   * List of permissions
   */
  permissions: string[]
  [k: string]: unknown
}

/** Creates a new set of permissions or over-writes all existing permissions */
export async function putUserPermissions (this: That, opts: PutUserPermissionsOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<PutUserPermissionsResponse>
export async function putUserPermissions (this: That, opts: PutUserPermissionsOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<PutUserPermissionsResponse, unknown>>
export async function putUserPermissions (this: That, opts: PutUserPermissionsOptions, transportOptions?: TransportRequestOptions): Promise<PutUserPermissionsResponse>
export async function putUserPermissions (this: That, opts: PutUserPermissionsOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'PUT',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/permissions/${encodeURIComponent(opts.user)}`,
    querystring: {},
    body: {}
  }

  return await this.transport.request<PutUserPermissionsResponse>(params, transportOptions)
}
