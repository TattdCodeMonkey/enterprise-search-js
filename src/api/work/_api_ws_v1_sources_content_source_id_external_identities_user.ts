/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface GetExternalIdentityOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  /**
   * The username in context
   */
  user: string
  [k: string]: unknown
}

export interface GetExternalIdentityResponse {
  source_user_id: string
  user: string
  [k: string]: unknown
}

/** Retrieves an external identity */
export async function getExternalIdentity (this: That, opts: GetExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<GetExternalIdentityResponse>
export async function getExternalIdentity (this: That, opts: GetExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<GetExternalIdentityResponse, unknown>>
export async function getExternalIdentity (this: That, opts: GetExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<GetExternalIdentityResponse>
export async function getExternalIdentity (this: That, opts: GetExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/external_identities/${encodeURIComponent(opts.user)}`,
    querystring: {}
  }

  return await this.transport.request<GetExternalIdentityResponse>(params, transportOptions)
}

export interface PutExternalIdentityOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  user: string
  source_user_id: string
  [k: string]: unknown
}

export interface PutExternalIdentityResponse {
  source_user_id: string
  user: string
  [k: string]: unknown
}

/** Updates an external identity */
export async function putExternalIdentity (this: That, opts: PutExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<PutExternalIdentityResponse>
export async function putExternalIdentity (this: That, opts: PutExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<PutExternalIdentityResponse, unknown>>
export async function putExternalIdentity (this: That, opts: PutExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<PutExternalIdentityResponse>
export async function putExternalIdentity (this: That, opts: PutExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'PUT',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/external_identities/${encodeURIComponent(opts.user)}`,
    querystring: {},
    body: {}
  }

  if (opts.source_user_id !== undefined) (params.body as Record<string, any>).source_user_id = opts.source_user_id
  if (opts.user !== undefined) (params.body as Record<string, any>).user = opts.user

  return await this.transport.request<PutExternalIdentityResponse>(params, transportOptions)
}

export interface DeleteExternalIdentityOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  /**
   * The username in context
   */
  user: string
  [k: string]: unknown
}

export type DeleteExternalIdentityResponse = 'ok'

/** Deletes an external identity */
export async function deleteExternalIdentity (this: That, opts: DeleteExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<DeleteExternalIdentityResponse>
export async function deleteExternalIdentity (this: That, opts: DeleteExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<DeleteExternalIdentityResponse, unknown>>
export async function deleteExternalIdentity (this: That, opts: DeleteExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<DeleteExternalIdentityResponse>
export async function deleteExternalIdentity (this: That, opts: DeleteExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'DELETE',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/external_identities/${encodeURIComponent(opts.user)}`,
    querystring: {},
    body: {}
  }

  return await this.transport.request<DeleteExternalIdentityResponse>(params, transportOptions)
}
