/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* eslint-disable @typescript-eslint/no-empty-interface */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface CreateAnalyticsEventOptions {
  type?: 'click' | 'feedback'
  /**
   * query identifier for the event
   */
  query_id?: string
  /**
   * page number of the document in the query result set
   */
  page?: number
  /**
   * content source identifier for the event document
   */
  content_source_id?: string
  /**
   * document identifier for the event
   */
  document_id?: string
  /**
   * rank of the document in the overall result set
   */
  rank?: number
  /**
   * the target identifier for a click event
   */
  event?: string
  /**
   * the feedback score, constrained to the values -1 or 1
   */
  score?: -1 | 1
}

interface CreateAnalyticsEventResponse {}

/** Capture click and feedback analytic events */
export async function createAnalyticsEvent (this: That, opts?: CreateAnalyticsEventOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<CreateAnalyticsEventResponse>
export async function createAnalyticsEvent (this: That, opts?: CreateAnalyticsEventOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<CreateAnalyticsEventResponse, unknown>>
export async function createAnalyticsEvent (this: That, opts?: CreateAnalyticsEventOptions, transportOptions?: TransportRequestOptions): Promise<CreateAnalyticsEventResponse>
export async function createAnalyticsEvent (this: That, opts?: CreateAnalyticsEventOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'POST',
    path: '/api/ws/v1/analytics/event',
    querystring: {},
    body: {}
  }

  if (opts?.type !== undefined) (params.body as Record<string, any>).type = opts.type
  if (opts?.query_id !== undefined) (params.body as Record<string, any>).query_id = opts.query_id
  if (opts?.page !== undefined) (params.body as Record<string, any>).page = opts.page
  if (opts?.content_source_id !== undefined) (params.body as Record<string, any>).content_source_id = opts.content_source_id
  if (opts?.document_id !== undefined) (params.body as Record<string, any>).document_id = opts.document_id
  if (opts?.rank !== undefined) (params.body as Record<string, any>).rank = opts.rank
  if (opts?.event !== undefined) (params.body as Record<string, any>).event = opts.event
  if (opts?.score !== undefined) (params.body as Record<string, any>).score = opts.score

  return await this.transport.request<CreateAnalyticsEventResponse>(params, transportOptions)
}
