/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface ListContentSourcesOptions {
  /**
   * Which page of results to request
   */
  currentPage?: number
  /**
   * The number of results to return in a page
   */
  pageSize?: number
}

export interface ListContentSourcesResponse {
  meta: {
    page: {
      current: number
      total_pages: number
      total_results: number
      size: number
    }
  }
  results: Array<{
    /**
     * The Content Source Identifier.
     */
    id: string
    /**
     * The Content Source's Service Type. For example, for Google Drive the Service Type is "google_drive".
     */
    service_type: string
    /**
     * The date/time at which this Content Source was originally created.
     */
    created_at: string
    /**
     * The date/time at which this Content Source was last updated.
     */
    last_updated_at: string
    /**
     * Whether or not this Content Source is a "remote" content source. See https://www.elastic.co/guide/en/workplace-search/current/workplace-search-content-sources.html#remote
     */
    is_remote: boolean
    /**
     * A list of key/value metadata for the Content Source and the account which authenticated/connected it.
     */
    details: Array<{
      [k: string]: unknown
    }>
    /**
     * A list of Workplace Search Group names and IDs which have access to this Content Source.
     */
    groups: Array<{
      id: string
      name: string
    }>
    /**
     * The human readable display name of this Content Source.
     */
    name: string
    /**
     * The schema that each document in this Content Source must adhere to.
     */
    schema: {
      [k: string]: 'text' | 'geolocation' | 'number' | 'date'
    }
    /**
     * The display details which governs which fields are displayed, and in what order, in the search results.
     */
    display: {
      title_field: string
      url_field: string
      color?: string
      description_field?: string
      subtitle_field?: string
      detail_fields?: Array<{
        label: string
        field_name: string
      }>
    }
    /**
     * Can be either "organization" or "private." This specifies whether this Content Source is available to groups of users, or a single user.
     */
    context: 'organization' | 'private'
    /**
     * Whether or not this Content Source can currently be searched over on the search page.
     */
    is_searchable: boolean
    /**
     * How many documents are currently indexed in this Content Source. Note, this field is not applicable to Remote Content Sources.
     */
    document_count?: number
    /**
     * The date/time when documents were last indexed into this Content Source. This may be "null" if documents have not yet been indexed. Note, this field is not applicable to Remote Content Sources.
     */
    last_indexed_at?: string | null
  }>
}

/** Retrieves all content sources */
export async function listContentSources (this: That, opts?: ListContentSourcesOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<ListContentSourcesResponse>
export async function listContentSources (this: That, opts?: ListContentSourcesOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<ListContentSourcesResponse, unknown>>
export async function listContentSources (this: That, opts?: ListContentSourcesOptions, transportOptions?: TransportRequestOptions): Promise<ListContentSourcesResponse>
export async function listContentSources (this: That, opts?: ListContentSourcesOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: '/api/ws/v1/sources',
    querystring: {}
  }

  if (opts?.currentPage !== undefined) (params.querystring as Record<string, any>).currentPage = opts.currentPage
  if (opts?.pageSize !== undefined) (params.querystring as Record<string, any>).pageSize = opts.pageSize

  return await this.transport.request<ListContentSourcesResponse>(params, transportOptions)
}
