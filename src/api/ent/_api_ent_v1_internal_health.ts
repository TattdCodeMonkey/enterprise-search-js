/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface GetHealthResponse {
  name: string
  version: {
    number: string
    build_hash: string
    build_date: string
    [k: string]: unknown
  }
  jvm: {
    pid: number
    uptime: number
    memory_usage: {
      heap_init: number
      heap_used: number
      heap_committed: number
      heap_max: number
      non_heap_init: number
      non_heap_committed: number
      [k: string]: unknown
    }
    memory_pools: string[]
    threads: {
      thread_count: number
      peak_thread_count: number
      total_started_thread_count: number
      daemon_thread_count: number
      [k: string]: unknown
    }
    vm_version: string
    vm_vendor: string
    vm_name: string
    [k: string]: unknown
  }
  filebeat: {
    pid?: number
    alive: boolean
    restart_count?: number
    seconds_since_last_restart?: number
    [k: string]: unknown
  }
  system: {
    java_version: string
    jruby_version: string
    os_name: string
    os_version: string
    [k: string]: unknown
  }
  [k: string]: unknown
}

/** Get information on the health of a deployment and basic statistics around resource usage */
export async function getHealth (this: That, opts?: any, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<GetHealthResponse>
export async function getHealth (this: That, opts?: any, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<GetHealthResponse, unknown>>
export async function getHealth (this: That, opts?: any, transportOptions?: TransportRequestOptions): Promise<GetHealthResponse>
export async function getHealth (this: That, opts = {}, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: '/api/ent/v1/internal/health'
  }

  return await this.transport.request<GetHealthResponse>(params, transportOptions)
}
