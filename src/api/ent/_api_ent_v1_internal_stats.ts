/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface GetStatsOptions {
  /**
   * Comma-separated list of stats to return
   */
  include?: string[]
}

export interface GetStatsResponse {
  app?: {
    pid: number
    start: string
    end: string
    metrics: {
      [k: string]:
      | number
      | {
        sum: number
        max: number
        mean: number
      }
    }
  }
  queues?: null
  connectors?: {
    alive: boolean
    pool: {
      extract_worker_pool: {
        running: boolean
        queue_depth: number
        size: number
        busy: number
        idle: number
        total_scheduled: number
        total_completed: number
      }
      subextract_worker_pool: {
        running: boolean
        queue_depth: number
        size: number
        busy: number
        idle: number
        total_scheduled: number
        total_completed: number
      }
      publish_worker_pool: {
        running: boolean
        queue_depth: number
        size: number
        busy: number
        idle: number
        total_scheduled: number
        total_completed: number
      }
      status_update_worker_pool: {
        running: boolean
        queue_depth: number
        size: number
        busy: number
        idle: number
        total_scheduled: number
        total_completed: number
      }
    }
    job_store: {
      waiting: number
      working: number
      job_types: {
        full: number
        incremental: number
        delete: number
        permissions: number
      }
    }
  }
}

/** Get information about the resource usage of the application, the state of different internal queues, etc. */
export async function getStats (this: That, opts?: GetStatsOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<GetStatsResponse>
export async function getStats (this: That, opts?: GetStatsOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<GetStatsResponse, unknown>>
export async function getStats (this: That, opts?: GetStatsOptions, transportOptions?: TransportRequestOptions): Promise<GetStatsResponse>
export async function getStats (this: That, opts?: GetStatsOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: '/api/ent/v1/internal/stats',
    querystring: {}
  }

  if (opts?.include !== undefined) (params.querystring as Record<string, any>).include = opts.include

  return await this.transport.request<GetStatsResponse>(params, transportOptions)
}
