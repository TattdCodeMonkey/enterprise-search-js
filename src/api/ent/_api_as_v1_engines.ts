/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface ListEnginesOptions {
  /**
   * The page to fetch. Defaults to 1
   */
  currentPage?: number
  /**
   * The number of results per page
   */
  pageSize?: number
}

export interface ListEnginesResponse {}

/** Retrieves all engines with optional pagination support */
export async function listEngines (this: That, opts?: ListEnginesOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<ListEnginesResponse>
export async function listEngines (this: That, opts?: ListEnginesOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<ListEnginesResponse, unknown>>
export async function listEngines (this: That, opts?: ListEnginesOptions, transportOptions?: TransportRequestOptions): Promise<ListEnginesResponse>
export async function listEngines (this: That, opts?: ListEnginesOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: '/api/as/v1/engines',
    querystring: {}
  }

  if (opts?.currentPage !== undefined) (params.querystring as Record<string, any>).currentPage = opts.currentPage
  if (opts?.pageSize !== undefined) (params.querystring as Record<string, any>).pageSize = opts.pageSize

  return await this.transport.request<ListEnginesResponse>(params, transportOptions)
}

export interface CreateEngineOptions {
  /**
   * Engine name
   */
  engineName: string
  /**
   * Engine language (null for universal)
   */
  language?: string
  /**
   * Engine type
   */
  type?: string
  /**
   * Sources engines list
   */
  source_engines?: string[]
}

export interface CreateEngineResponse {}

/** Creates a new engine */
export async function createEngine (this: That, opts: CreateEngineOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<CreateEngineResponse>
export async function createEngine (this: That, opts: CreateEngineOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<CreateEngineResponse, unknown>>
export async function createEngine (this: That, opts: CreateEngineOptions, transportOptions?: TransportRequestOptions): Promise<CreateEngineResponse>
export async function createEngine (this: That, opts: CreateEngineOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'POST',
    path: '/api/as/v1/engines',
    querystring: {},
    body: {}
  }

  if (opts.engineName !== undefined) (params.querystring as Record<string, any>).engineName = opts.engineName
  if (opts.language !== undefined) (params.querystring as Record<string, any>).language = opts.language
  if (opts.type !== undefined) (params.querystring as Record<string, any>).type = opts.type
  if (opts.source_engines !== undefined) (params.querystring as Record<string, any>).source_engines = opts.source_engines

  return await this.transport.request<CreateEngineResponse>(params, transportOptions)
}
