/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface ListExternalIdentitiesOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  /**
   * Which page of results to request
   */
  currentPage?: number
  /**
   * The number of results to return in a page
   */
  pageSize?: number
}

export interface ListExternalIdentitiesResponse {
  meta: {
    page: {
      current: number
      total_pages: number
      total_results: number
      size: number
    }
  }
  results: Array<{
    source_user_id: string
    user: string
  }>
}

/** Retrieves all external identities */
export async function listExternalIdentities (this: That, opts: ListExternalIdentitiesOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<ListExternalIdentitiesResponse>
export async function listExternalIdentities (this: That, opts: ListExternalIdentitiesOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<ListExternalIdentitiesResponse, unknown>>
export async function listExternalIdentities (this: That, opts: ListExternalIdentitiesOptions, transportOptions?: TransportRequestOptions): Promise<ListExternalIdentitiesResponse>
export async function listExternalIdentities (this: That, opts: ListExternalIdentitiesOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/external_identities`,
    querystring: {}
  }

  if (opts.currentPage !== undefined) (params.querystring as Record<string, any>).currentPage = opts.currentPage
  if (opts.pageSize !== undefined) (params.querystring as Record<string, any>).pageSize = opts.pageSize

  return await this.transport.request<ListExternalIdentitiesResponse>(params, transportOptions)
}

export interface CreateExternalIdentityOptions {
  /**
   * Unique ID for a Custom API source, provided upon creation of a Custom API Source
   */
  content_source_id: string
  source_user_id: string
  user: string
}

export interface CreateExternalIdentityResponse {
  source_user_id: string
  user: string
}

/** Adds a new external identity */
export async function createExternalIdentity (this: That, opts: CreateExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<CreateExternalIdentityResponse>
export async function createExternalIdentity (this: That, opts: CreateExternalIdentityOptions, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<CreateExternalIdentityResponse, unknown>>
export async function createExternalIdentity (this: That, opts: CreateExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<CreateExternalIdentityResponse>
export async function createExternalIdentity (this: That, opts: CreateExternalIdentityOptions, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'POST',
    path: `/api/ws/v1/sources/${encodeURIComponent(opts.content_source_id)}/external_identities`,
    querystring: {},
    body: {}
  }

  if (opts.source_user_id !== undefined) (params.body as Record<string, any>).source_user_id = opts.source_user_id
  if (opts.user !== undefined) (params.body as Record<string, any>).user = opts.user

  return await this.transport.request<CreateExternalIdentityResponse>(params, transportOptions)
}
