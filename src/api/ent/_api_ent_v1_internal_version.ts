/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// This file was automatically generated by elastic/elastic-client-generator-js
// DO NOT MODIFY IT BY HAND. Instead, modify the source open api file,
// and elastic/elastic-client-generator-js to regenerate this file again.

import {
  Transport,
  TransportRequestParams,
  TransportRequestOptions,
  TransportRequestOptionsWithMeta,
  TransportRequestOptionsWithOutMeta,
  TransportResult
} from '@elastic/transport'
interface That { transport: Transport }

export interface GetVersionResponse {
  number: string
  build_hash: string
  build_date: string
  [k: string]: unknown
}

/** Get version information for this server */
export async function getVersion (this: That, opts?: any, transportOptions?: TransportRequestOptionsWithOutMeta): Promise<GetVersionResponse>
export async function getVersion (this: That, opts?: any, transportOptions?: TransportRequestOptionsWithMeta): Promise<TransportResult<GetVersionResponse, unknown>>
export async function getVersion (this: That, opts?: any, transportOptions?: TransportRequestOptions): Promise<GetVersionResponse>
export async function getVersion (this: That, opts = {}, transportOptions?: TransportRequestOptions): Promise<any> {
  const params: TransportRequestParams = {
    method: 'GET',
    path: '/api/ent/v1/internal/version'
  }

  return await this.transport.request<GetVersionResponse>(params, transportOptions)
}
